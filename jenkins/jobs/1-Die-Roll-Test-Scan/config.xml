<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.2.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/Mbwata/devops-bootcamp.git</url>
        <credentialsId>Github</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.SCMTrigger>
      <spec>H/2 * * * *</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <sp.sd.flywayrunner.builder.FlywayBuilder plugin="flyway-runner@1.9">
      <flywayCommand>clean</flywayCommand>
      <installationName>Flyway1</installationName>
      <url>jdbc:postgresql://die-roll-db.dieroll:5432/dieroll</url>
      <commandLineArgs></commandLineArgs>
      <locations>filesystem:${WORKSPACE}/sql</locations>
      <credentialsId>dierolldb</credentialsId>
    </sp.sd.flywayrunner.builder.FlywayBuilder>
    <sp.sd.flywayrunner.builder.FlywayBuilder plugin="flyway-runner@1.9">
      <flywayCommand>migrate</flywayCommand>
      <installationName>Flyway1</installationName>
      <url>jdbc:postgresql://die-roll-db.dieroll:5432/dieroll</url>
      <commandLineArgs></commandLineArgs>
      <locations>filesystem:${WORKSPACE}/sql</locations>
      <credentialsId>dierolldb</credentialsId>
    </sp.sd.flywayrunner.builder.FlywayBuilder>
    <hudson.tasks.Shell>
      <command>npm install
npm test</command>
    </hudson.tasks.Shell>
    <hudson.plugins.sonar.SonarRunnerBuilder plugin="sonar@2.11">
      <project></project>
      <properties></properties>
      <javaOpts></javaOpts>
      <additionalArguments></additionalArguments>
      <jdk>(Inherit From Job)</jdk>
      <task></task>
    </hudson.plugins.sonar.SonarRunnerBuilder>
    <sp.sd.fileoperations.FileOperationsBuilder plugin="file-operations@1.9">
      <fileOperations>
        <sp.sd.fileoperations.FileZipOperation>
          <folderPath>./sql</folderPath>
        </sp.sd.fileoperations.FileZipOperation>
      </fileOperations>
    </sp.sd.fileoperations.FileOperationsBuilder>
    <hudson.tasks.Shell>
      <command>curl -v --user ${nexususer}:${nexuspw} --upload-file sql.zip http://nexus.nexus:9081/repository/dieroll-sql/sql_v${BUILD_NUMBER}.zip
curl -v --user ${nexususer}:${nexuspw} --upload-file sql.zip http://nexus.nexus:9081/repository/dieroll-sql/sql_latest.zip</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>helm package helm
CHART=$(find . -name die-roll-*.tgz)

curl -u ${nexususer}:${nexuspw} http://nexus.nexus:9081/repository/dieroll-helm/ --upload-file $CHART -v</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>docker login nexus-repo.localhost -u ${nexususer} -p ${nexuspw}

docker build -t nexus-repo.localhost/dieroll:latest .
docker tag nexus-repo.localhost/dieroll:latest nexus-repo.localhost/dieroll:v${BUILD_NUMBER}

docker push nexus-repo.localhost/dieroll:latest
docker push nexus-repo.localhost/dieroll:v${BUILD_NUMBER}</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.36">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>v${BUILD_NUMBER}</properties>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>2-Die-Roll-Deploy</projects>
          <condition>SUCCESS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <triggerFromChildProjects>false</triggerFromChildProjects>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.38">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.22">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
          <credentialsId>nexus</credentialsId>
          <usernameVariable>nexususer</usernameVariable>
          <passwordVariable>nexuspw</passwordVariable>
        </org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
    <jenkins.plugins.nodejs.NodeJSBuildWrapper plugin="nodejs@1.3.5">
      <nodeJSInstallationName>Node1</nodeJSInstallationName>
      <cacheLocationStrategy class="jenkins.plugins.nodejs.cache.DefaultCacheLocationLocator"/>
    </jenkins.plugins.nodejs.NodeJSBuildWrapper>
  </buildWrappers>
</project>