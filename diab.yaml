apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---

kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
    verbs:
      - update

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      # wait up to five minutes for the drain of connections
      terminationGracePeriodSeconds: 300
      serviceAccountName: nginx-ingress-serviceaccount
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - name: nginx-ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0
          args:
            - /nginx-ingress-controller
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx
            - --annotations-prefix=nginx.ingress.kubernetes.io
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            # www-data -> 101
            runAsUser: 101
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          lifecycle:
            preStop:
              exec:
                command:
                  - /wait-shutdown

---

apiVersion: v1
kind: LimitRange
metadata:
  name: ingress-nginx
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  limits:
  - min:
      memory: 90Mi
      cpu: 100m
    type: Container

---

    kind: Service
    apiVersion: v1
    metadata:
      name: ingress-nginx
      namespace: ingress-nginx
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
    spec:
      externalTrafficPolicy: Local
      type: LoadBalancer
      selector:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
      ports:
        - name: http
          port: 80
          targetPort: http
        - name: https
          port: 443
          targetPort: https

---

    apiVersion: v1
    kind: Namespace
    metadata:
      name: jenkins
      labels:
        app.kubernetes.io/name: jenkins
        app.kubernetes.io/part-of: jenkins   

---
#Dont forget to remove the volumes
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    app: deploy-jenkins
    release: v1
spec:
  strategy:
    rollingUpdate:
      maxUnavailable: 0
  replicas: 1
  selector:
    matchLabels:
      app: deploy-jenkins
      release: v1
  template:
    metadata:
      labels:
        app: deploy-jenkins
        release: v1
    spec:
      containers:
      - image: housems/diab_jenkins
        imagePullPolicy: Always
        name: deploy-jenkins
        ports:
        - containerPort: 8080
        volumeMounts:
         - mountPath: /var/run/docker.sock
           name: docker-sock
         - mountPath: /var/jenkins_home
           name: jenkins-home
        ports:
        - containerPort: 8080
      volumes:
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
            type: Socket
        - name: jenkins-home
          hostPath:
            path: /Users/mitchconner/docker/volumes/jenkins4kubes/jenkins_home
            type: DirectoryOrCreate
  

---
    
    apiVersion: extensions/v1beta1
    kind: Ingress
    metadata:
      name: jenkins
      namespace: jenkins
      annotations:
        nginx.ingress.kubernetes.io/ssl-redirect: "false"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
        nginx.ingress.kubernetes.io/rewrite-target: /$2
      labels:
        app: deploy-jenkins
    spec:
      tls:
      - hosts:
        - jenkins.localhost
        secretName: tls-secret
      rules:
      - host: jenkins.localhost
        http:
          paths:
            - path: /(/|$)(.*)
              backend:
                serviceName: jenkins
                servicePort: 80
            - path: /([ ]*)(.*)
              backend:
                serviceName: jenkins
                servicePort: 80
                
---
    
    apiVersion: v1
    kind: Service
    metadata:
      name: jenkins
      namespace: jenkins
    spec:
      ports:
        - port: 80
          targetPort: 8080
          protocol: TCP
      type: NodePort
      selector:
        app: deploy-jenkins
        release: v1    

---

apiVersion: v1
kind: Namespace
metadata:
  name: dieroll
  labels:
    app.kubernetes.io/name: dieroll
    app.kubernetes.io/part-of: dieroll   

---        

apiVersion: v1
kind: Service
metadata:
  name: die-roll-db
  namespace: dieroll
spec:
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
  type: NodePort
  selector:
    app: die-roll-db
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: Cluster
status:
  loadBalancer:
    ingress:
      - hostname: localhost
---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: die-roll-db-deployment
  namespace: dieroll
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: die-roll-db
    spec:
      containers:
      - image: postgres:12.2
        imagePullPolicy: Always
        name: die-roll-db
        ports:
        - containerPort: 5432
        env:
          - name: POSTGRES_DB
            value: dieroll
          - name: POSTGRES_USER
            value: sketch
          - name: POSTGRES_PASSWORD
            value: passord

---
  
apiVersion: v1
kind: Namespace
metadata:
  name: sonarqube
  labels:
    app.kubernetes.io/name: sonarqube
    app.kubernetes.io/part-of: sonarqube  

---
  
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sonarqube
  namespace: sonarqube
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sonarqube
    spec:
      containers:
      - image: sonarqube   
        imagePullPolicy: Always
        name: sonarqube                
        ports:
        - containerPort: 9000
        
---
  
apiVersion: v1
kind: Service
metadata:
  name: sonarqube
  namespace: sonarqube
spec:
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
  type: NodePort
  selector:
    app: sonarqube
    release: v1  

---   

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sonarqube
  namespace: sonarqube
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  labels:
    app: sonarqube
spec:
  tls:
  - hosts:
    - sonarqube.localhost
    secretName: tls-secret
  rules:
  - host: sonarqube.localhost
    http:
      paths:
        - path: /(/|$)(.*)
          backend:
            serviceName: sonarqube
            servicePort: 9000
        - path: /([ ]*)(.*)
          backend:
            serviceName: sonarqube
            servicePort: 9000

---

  apiVersion: v1
  kind: Namespace
  metadata:
    name: nexus
    labels:
      app.kubernetes.io/name: nexus
      app.kubernetes.io/part-of: nexus   
  
---

  apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    name: nexus
    namespace: nexus
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: nexus
      spec:
        containers:
        - image: diab_nexus   
          imagePullPolicy: Always
          name: nexus
          volumeMounts:
           - mountPath: /nexus-data
             name: nexusdata                   
          ports:
          - containerPort: 8081
        volumes:
          - name: nexusdata
            hostPath:
              path: /Users/mitchconner/docker/volumes/nexus4kubes/nexus-data
              type: DirectoryOrCreate   

--- 
  
  apiVersion: v1
  kind: Service
  metadata:
    name: nexus
    namespace: nexus
  spec:
    ports:
      - port: 80
        targetPort: 8081
        protocol: TCP
    type: NodePort
    selector:
      app: nexus
      release: v1
      
---
  
  apiVersion: extensions/v1beta1
  kind: Ingress
  metadata:
    name: nexus
    namespace: nexus
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/proxy-body-size: 0m
    labels:
      app: nexus
  spec:
    tls:
    - hosts:
      - nexus.localhost
      secretName: tls-secret
    rules:
    - host: nexus.localhost
      http:
        paths:
          - path: /(/|$)(.*)
            backend:
              serviceName: nexus
              servicePort: 80
          - path: /([ ]*)(.*)
            backend:
              serviceName: nexus
              servicePort: 80
              
---
  
  apiVersion: v1
  kind: Service
  metadata:
    name: nexus-repo
    namespace: nexus
  spec:
    ports:
      - port: 81
        targetPort: 8090
        protocol: TCP
    type: NodePort
    selector:
      app: nexus
      release: v1
      
---
  
  apiVersion: extensions/v1beta1
  kind: Ingress
  metadata:
    name: nexus-repo
    namespace: nexus
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/proxy-body-size: 0m
    labels:
      app: nexus
  spec:
    tls:
    - hosts:
      - nexus-repo.localhost
      secretName: tls-secret
    rules:
    - host: nexus-repo.localhost
      http:
        paths:
          - path: /(/|$)(.*)
            backend:
              serviceName: nexus-repo
              servicePort: 8090
          - path: /([ ]*)(.*)
            backend:
              serviceName: nexus-repo
              servicePort: 8090  